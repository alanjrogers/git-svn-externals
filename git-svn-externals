#!/usr/bin/env ruby

#TODO: Check that we are at the root of a git repo

require 'fileutils'
include FileUtils

$commands = ["up", "update", "status", "dcommit", "clone"]

def externals_from_string(externals_string)

	external_entries = externals_string.split("\n")
	
	paths = Array.new
	external_entries.each do |external|
	
		split_external = external.split(" ")
		paths.push({:local_path => split_external[0], :remote_url => split_external[1]})
	
	end	
	
	paths

end

def externals_in_repo()
	
	puts "Calling show-externals, this can take a long time on repositories with lots of directories.\nTo speed this up use the -d flag and specify a directory where you know externals are.\n"
	externals_string = `git svn show-externals|grep -vE '#|^$'`
	externals_from_string(externals_string)

end

def externals_in_dir(path)

	puts "Calling propget on #{path}…\n"
	
	externals_string = Dir.chdir(path) do
		`git svn propget svn:externals`
	end
	
	externals_from_string(externals_string)	
end

def print_help()

	puts "Possible commands:\n"
	puts $commands
	puts "Flags:\n-r: Rebases the current git repository before doing anything elsen\n-d: Specifies a directory you want to check for externals, which avoids calling git svn show-externals which can be slow.\n-c: Clones any externals that it can't find."

end

def update(externals)

	externals.each do |external|
	
		Dir.chdir(external[:local_path]) do 
		
			puts ">>>>>>>>>>>>>>> #{external[:local_path]} <<<<<<<<<<<<<<<"
			puts `git svn rebase`
			puts "\n"
		
		end
	
	end

end

def status(externals)

	externals.each do |external| 
		#strip leading slash to ensure relative paths - this would lead to issues with externals at the root
		path = external[:local_path]
		if (path.start_with?("/"))
			path = path[1..path.length-1]
		end
	
		Dir.chdir(path) do
		
			puts ">>>>>>>>>>>>>>> #{path} <<<<<<<<<<<<<<<"
			puts `git status`
			puts "\n"
	
		end
	
	end

end

def dcommit(externals)

	externals.each do |external|
	
		Dir.chdir(external[:local_path]) do
			
			puts ">>>>>>>>>>>>>>> #{external[:local_path]} <<<<<<<<<<<<<<<"
			puts `git svn dcommit`
			puts "\n"
			
		end
	
	end

end

def clone(externals)

	externals.each do |external|
	
		puts "Cloning #{external[:remote_url]}…"
		#TODO: have this output its progress
		`git svn clone #{external[:remote_url]} #{external[:local_path]}`
	
	end
	
	#TODO: ignore the cloned files

end

def filter_externals!(externals)
	# Checks to see if the externals exist, if not it puts what hasn't been cloned and removes it from the array. 
	externals_to_clone = []
	externals.each do |external|
		
		path = external[:local_path]
		if (!File.exists?(path))
			if (ARGV.include?("-c"))
				externals_to_clone.push(external)
			else
				puts "#{path} does not exist, it probably hasn't been cloned yet, skipping for now…"
				externals.delete(external)
			end
		end
		
	end
	
	if (externals_to_clone.count != 0)
		clone(externals_to_clone)
	end

end

if (ARGV.count == 0)

	print_help
	exit 0
	
end

command = ARGV[0]
if (!$commands.include?(command))

	puts "Unrecognised command #{command}. Run without any flags or commands to see help."
	exit 0

end

if (ARGV.include?("-r"))
	`git svn rebase`
end

specified_dir = nil

if (ARGV.include?("-d"))

	directory_var_index = ARGV.index("-d") + 1
	dir = ARGV.fetch(directory_var_index, nil)
	if (dir == nil)
		puts "No directory supplied."
		exit 0
	end
	
	specified_dir = dir
	
end

externals = specified_dir == nil ? externals_in_repo : externals_in_dir(specified_dir)

if specified_dir != nil 
	Dir.chdir(specified_dir)
end

if (externals == nil || externals.count == 0)
	puts "No externals found in repository or given directory"
	exit 0
end

puts "Found external definitions…\n"

if (command != "clone")
	filter_externals!(externals)
end

case command
	
	when "up"
		update(externals)
	when "update"
		update(externals)
	when "status"
		status(externals)
	when "dcommit"
		dcommit(externals)
	when "clone"
		clone(externals)
end
